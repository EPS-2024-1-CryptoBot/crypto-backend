name: Deploy Backend

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  build:
    name: Build and Push
    runs-on: ubuntu-22.04
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Dependencies
        run: |
          sudo apt-get -y install make

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_DEFAULT_REGION }}

      - name: Pull Firebase Credentials
        uses: keithweaver/aws-s3-github-action@v1.0.0
        with:
          command: cp
          source: ${{ vars.FIREBASE_JSON_S3_PATH }}
          destination: ./env/prod/firebase.json
          aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws_region: ${{ vars.AWS_DEFAULT_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push docker image to Amazon ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: ${{ vars.ECR_REPO_NAME }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build \
          --build-arg PORT=${{ vars.PORT }} \
          --build-arg JWT_SECRET=${{ secrets.JWT_SECRET }} \
          --build-arg DATABASE_URL=${{ secrets.DATABASE_URL }} \
          --build-arg URL_WALLET=${{ secrets.URL_WALLET }} \
          --build-arg URL_RSA=${{ secrets.URL_RSA }} \
          --build-arg URL_CONSULTANT=${{ secrets.URL_CONSULTANT }} \
          -f Dockerfile.prod \
          -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

      - name: Deploy Infrastructure
        env:
            TF_VAR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
            TF_VAR_REPOSITORY: ${{ vars.ECR_REPO_NAME }}
            TF_VAR_IMAGE_TAG: ${{ github.sha }}
            TF_VAR_environment: prod
            TF_VAR_PG_USERNAME: ${{ secrets.PG_USERNAME }}
            TF_VAR_PG_PASSWORD: ${{ secrets.PG_PASSWORD }}
        run: |
          make tf-init
          make tf-apply

  update:
    runs-on: ubuntu-22.04
    name: Update Files
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Update Compose
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          password: ${{ secrets.VPS_PASSWORD }}
          port: 22
          source: "docker-compose-prod.yaml,Makefile,Caddyfile.prod"
          target: /home/debian/srv

  deploy:
    runs-on: ubuntu-22.04
    name: Deploy
    needs: [build, update]

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_DEFAULT_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Deploying Server
        uses: appleboy/ssh-action@v1.0.3
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: ${{ vars.ECR_REPO_NAME }}
          IMAGE_TAG: ${{ github.sha }}
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          password: ${{ secrets.VPS_PASSWORD }}
          port: 22
          script: |
            cd /home/debian/srv
            aws configure set region ${{ vars.AWS_DEFAULT_REGION }}
            aws --profile default configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws --profile default configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            docker stop backend_server
            docker system prune -f -a
            sudo su && \
            export REGISTRY=${{ steps.login-ecr.outputs.registry }} && \
            export REPOSITORY=${{ vars.ECR_REPO_NAME }} && \
            export IMAGE_TAG=${{ github.sha }} && \
            aws ecr get-login-password --region ${{ vars.AWS_DEFAULT_REGION }} | docker login --username AWS --password-stdin $REGISTRY && \
            make deploy-prod
